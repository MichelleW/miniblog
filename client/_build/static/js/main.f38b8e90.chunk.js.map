{"version":3,"sources":["components/MiniBlog.js","App.js","registerServiceWorker.js","index.js"],"names":["MiniBlog","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getData","axios","get","then","res","blogPosts","data","setState","handleSubmit","event","preventDefault","newData","name","state","title","content","post","clearForm","handleChange","nam","target","val","value","defineProperty","displayBlogPosts","length","concat","_id","date","__v","map","react_default","a","createElement","className","key","document","querySelector","reset","onSubmit","htmlFor","type","id","placeholder","onChange","Component","App","components_MiniBlog","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f38b8e90.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass MiniBlog extends Component {\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      name: '',\n      title: '',\n      content: '',\n      blogPosts: []\n    }\n  }\n\n  componentDidMount() {\n    // this.getData()\n  }\n\n  getData = () => {\n    axios.get(`/api/posts`)\n      .then(res => {\n        const blogPosts = res.data;\n        this.setState({ blogPosts });\n      })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    let newData = {\n      name: this.state.name,\n      title: this.state.title,\n      content: this.state.content\n    }\n    axios.post('/api/posts', newData)\n    this.clearForm()\n    this.getData()\n  }\n\n  handleChange = (event) => {\n    let nam = event.target.name;\n    let val = event.target.value;\n    this.setState({ [nam]: val });\n  }\n\n  displayBlogPosts = () => {\n    let { blogPosts } = this.state\n    let more = [{\n      \"_id\": \"5dd5f221bc72fc271113e174\",\n      \"name\": \"Mish\",\n      \"title\": \"A day in Mountain View\",\n      \"date\": \"2019-11-21T02:10:41.190Z\",\n      \"__v\": 0\n    },\n      {\n        \"_id\": \"5dd5f10dd9f47a2035fd9100\",\n        \"name\": \"hey\",\n        \"title\": \"testing\",\n        \"date\": \"2019-11-21T02:06:05.836Z\",\n        \"__v\": 0\n      },\n      {\n        \"_id\": \"5dd5a9aab12199c9cb3222d8\",\n        \"name\": \"Poke lunch\",\n        \"date\": \"2019-11-20T21:01:30.167Z\",\n        \"__v\": 0\n      },]\n    if(blogPosts.length === 0){\n      this.setState({blogPosts: [...more]})\n    }\n    return blogPosts.map((post) => {\n      return <div className=\"post\" key={post._id}>\n        <h2>Blog Title: {post.title}</h2>\n        <h5>Author: {post.name}</h5>\n        <p>Blog conent goes here {post.content}</p>\n        <small>Created By: {post.date}</small>\n        <p><small>{post._id}</small></p>\n      </div>\n    })\n  }\n\n  clearForm = () => {\n    document.querySelector(\".createNew\").reset();\n  }\n\n  render() {\n    return (\n      <div className=\"MiniBlog\">\n        <form className=\"createNew\" onSubmit={this.handleSubmit}>\n          <div>\n            <label htmlFor='title'>Title</label>\n            <input\n              type='text'\n              name='title'\n              id='title'\n              placeholder='...title for new blog'\n              onChange={this.handleChange}\n            />\n\n            <label htmlFor=\"content\">Blog Content</label>\n            <input type=\"textarea\" name=\"content\" id=\"content\" onChange={this.handleChange} />\n\n            <label htmlFor='name'>Author</label>\n            <input\n              type='text'\n              name='name'\n              id='name'\n              placeholder='...writtend by'\n              onChange={this.handleChange}\n            />\n\n            <button>Add A New Blog</button>\n\n          </div>\n        </form>\n\n        {this.displayBlogPosts()}\n      </div>\n    );\n  }\n}\n\nexport default MiniBlog;","import React, { Component } from 'react'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\nimport MiniBlog from './components/MiniBlog';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"app\">\n        <MiniBlog />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'; \nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}